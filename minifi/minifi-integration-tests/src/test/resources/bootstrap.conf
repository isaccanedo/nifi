#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Java command to use when running MiNiFi
java=java

# Username to use when running MiNiFi. This value will be ignored on Windows.
run.as=

# Configure where MiNiFi's lib and conf directories live
# When running as a Windows service set full paths instead of relative paths
lib.dir=./lib
conf.dir=./conf

# How long to wait after telling MiNiFi to shutdown before explicitly killing the Process
graceful.shutdown.seconds=20

# Disable JSR 199 so that we can use JSP's without running a JDK
java.arg.1=-Dorg.apache.jasper.compiler.disablejsr199=true

# JVM memory settings
java.arg.2=-Xms256m
java.arg.3=-Xmx256m

# allowRestrictedHeaders is required for Cluster/Node communications to work properly
java.arg.5=-Dsun.net.http.allowRestrictedHeaders=true
java.arg.6=-Djava.protocol.handler.pkgs=sun.net.www.protocol

# Sets the provider of SecureRandom to /dev/urandom to prevent blocking on VMs
java.arg.7=-Djava.security.egd=file:/dev/urandom

# Garbage Collector Algorithm
java.arg.13=-XX:+UseG1GC

#Set headless mode by default
java.arg.14=-Djava.awt.headless=true

# Enable Remote Debugging
#java.arg.debug=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000


### MiNiFi Flow Config File
nifi.minifi.flow.config=./conf/flow.json.gz


### MiNiFi Security Properties
nifi.minifi.security.keystore=
nifi.minifi.security.keystoreType=
nifi.minifi.security.keystorePasswd=
nifi.minifi.security.keyPasswd=
nifi.minifi.security.truststore=
nifi.minifi.security.truststoreType=
nifi.minifi.security.truststorePasswd=
nifi.minifi.security.ssl.protocol=

# Ignore all processor SSL controller services and use parent minifi SSL instead
nifi.minifi.flow.use.parent.ssl=false


### MiNiFi Sensitive Properties Settings
nifi.minifi.sensitive.props.key=
nifi.minifi.sensitive.props.algorithm=


### MiNiFi Command & Control (C2) Configuration
# Enabling C2 Uncomment each of the following options
#c2.enable=true
## heartbeat in milliseconds
#c2.agent.heartbeat.period=5000
## define parameters about your agent
#c2.agent.class=
# Optional.  Defaults to a hardware based unique identifier
#c2.agent.identifier=
# If set to false heartbeat won't contain the manifest. Defaults to true.
#c2.full.heartbeat=false
## define protocol parameters
# DEPRECATED: c2.rest.url and c2.rest.url.ack are deprecated in favor of c2.rest.path.* properties and are target to be removed in future release
# The absolute url of the C2 server's heartbeat endpoint, eg.: http://localhost/c2-server/api/heartbeat
#c2.rest.url=
# The absolute url of the C2 server's acknowledge endpoint, eg.: http://localhost/c2-server/api/acknowledge
#c2.rest.url.ack=
# C2 Rest Path Properties
# The base path of the C2 server's REST API, eg.: http://localhost/c2-server/api
#c2.rest.path.base=
# Relative url of the C2 server's heartbeat endpoint, eg.: /heartbeat
#c2.rest.path.heartbeat=
# Relative url of the C2 server's acknowledge endpoint, eg.: /acknowledge
#c2.rest.path.acknowledge=
## c2 timeouts
#c2.rest.connectionTimeout=5 sec
#c2.rest.readTimeout=5 sec
#c2.rest.callTimeout=10 sec
#c2.config.directory=./conf
#c2.runtime.manifest.identifier=minifi
#c2.runtime.type=minifi-java
# Directory for storing assets downloaded via C2 update/asset command
#c2.asset.directory=./asset
## Define TLS security properties for C2 communications
#c2.security.truststore.location=
#c2.security.truststore.password=
#c2.security.truststore.type=JKS
#c2.security.keystore.location=
#c2.security.keystore.password=
#c2.security.keystore.type=JKS
#c2.request.compression=none


### MiNiFi Notifiers For Flow Updates
# If C2 is enabled these should be disabled
# Notifiers to use for the associated agent, comma separated list of class names, choose from the options below
#nifi.minifi.notifier.ingestors=

# File change notifier configuration - org.apache.nifi.minifi.bootstrap.configuration.ingestors.FileChangeIngestor
# Path of the file to monitor for changes.  When these occur, the FileChangeNotifier, if configured, will begin the configuration reloading process
#nifi.minifi.notifier.ingestors.file.config.path=
# How frequently the file specified by 'nifi.minifi.notifier.file.config.path' should be evaluated for changes.
#nifi.minifi.notifier.ingestors.file.polling.period.seconds=5

# Rest change notifier configuration - org.apache.nifi.minifi.bootstrap.configuration.ingestors.RestChangeIngestor
# Port on which the Jetty server will bind to, keep commented for a random open port
#nifi.minifi.notifier.ingestors.receive.http.port=8338

#Pull HTTP change notifier configuration - org.apache.nifi.minifi.bootstrap.configuration.ingestors.PullHttpChangeIngestor
# Hostname on which to pull configurations from
#nifi.minifi.notifier.ingestors.pull.http.hostname=localhost
# Port on which to pull configurations from
#nifi.minifi.notifier.ingestors.pull.http.port=4567
# Path to pull configurations from
#nifi.minifi.notifier.ingestors.pull.http.path=/c2/config
# Query string to pull configurations with
#nifi.minifi.notifier.ingestors.pull.http.query=class=raspi3
# Period on which to pull configurations from, defaults to 5 minutes if commented out
#nifi.minifi.notifier.ingestors.pull.http.period.ms=300000
# Comma separated list of HTTP headers, eg: Accept:application/json,Accept:application/yaml
#nifi.minifi.notifier.ingestors.pull.http.headers=


### MiNiFi Status Reporter
# Periodic Status Reporters to use for the associated agent, comma separated list of class names
#nifi.minifi.status.reporter.components=org.apache.nifi.minifi.bootstrap.status.reporters.StatusLogger
# Periodic Status Logger configuration
# The FlowStatus query to submit to the MiNiFi instance
#nifi.minifi.status.reporter.log.query=instance:health,bulletins
# The log level at which the status will be logged
#nifi.minifi.status.reporter.log.level=INFO
# The period (in milliseconds) at which to log the status
#nifi.minifi.status.reporter.log.period=60000


### MiNiFi Provenance Reporting Properties
#nifi.minifi.provenance.reporting.comment=
#nifi.minifi.provenance.reporting.scheduling.strategy=
#nifi.minifi.provenance.reporting.scheduling.period=
#nifi.minifi.provenance.reporting.destination.url=
#nifi.minifi.provenance.reporting.input.port.name=
#nifi.minifi.provenance.reporting.instance.url=
#nifi.minifi.provenance.reporting.batch.size=
#nifi.minifi.provenance.reporting.communications.timeout=
#nifi.minifi.provenance.reporting.compress.events=


### NiFi Framework Properties
# Core Properties
nifi.flowcontroller.graceful.shutdown.period=10 sec
nifi.flowservice.writedelay.interval=500 ms
nifi.administrative.yield.duration=30 sec
nifi.bored.yield.duration=10 millis
# FlowFile Repository
nifi.flowfile.repository.implementation=org.apache.nifi.controller.repository.WriteAheadFlowFileRepository
nifi.flowfile.repository.checkpoint.interval=20 secs
nifi.flowfile.repository.always.sync=false
# Content Repository
nifi.content.repository.implementation=org.apache.nifi.controller.repository.FileSystemRepository
nifi.content.claim.max.appendable.size=50 KB
nifi.content.repository.archive.max.retention.period=7 days
nifi.content.repository.archive.max.usage.percentage=50%
nifi.content.repository.archive.enabled=false
# Provenance Repository
nifi.provenance.repository.implementation=org.apache.nifi.provenance.NoOpProvenanceRepository
nifi.provenance.repository.rollover.time=
nifi.provenance.repository.index.shard.size=
nifi.provenance.repository.max.storage.size=
nifi.provenance.repository.max.storage.time=
# Components Status Repository
nifi.components.status.repository.implementation=org.apache.nifi.controller.status.history.VolatileComponentStatusRepository
nifi.components.status.snapshot.frequency=1 min
# Swap Manager
nifi.swap.manager.implementation=org.apache.nifi.controller.FileSystemSwapManager
nifi.queue.swap.threshold=20000
